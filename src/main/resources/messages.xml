<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://findbugs.googlecode.com/svn/trunk/findbugs/etc/messagecollection.xsd">

	<Plugin>
		<ShortDescription>Guice</ShortDescription>
		<Details>Provides detectors relating to Guice: http://code.google.com/p/google-guice/</Details>
	</Plugin>

	<Detector class="uk.me.tom_fitzhenry.findbugs.guice.ScopingOnInterfacesDetector">
		<Details>
			Finds interfaces with scoping annotations.
		</Details>
	</Detector>
	
	<Detector class="uk.me.tom_fitzhenry.findbugs.guice.SuspiciousSubmoduleConfigurationDetector">
		<Details>
			Finds suspicious configuration of submodules.
		</Details>
	</Detector>
	
	<Detector class="uk.me.tom_fitzhenry.findbugs.guice.StaticFieldInjectionDetector">
		<Details>
			Finds static fields annotated with @Inject.
		</Details>
	</Detector>
	
	<Detector class="uk.me.tom_fitzhenry.findbugs.guice.FinalFieldInjectionDetector">
	    <Details>
	    	Finds final fields annotated with @Inject.
	    </Details>
	</Detector>

	<BugPattern type="GUICE_SCOPE_ON_INTERFACE">
		<ShortDescription>Scope annotation on interfaces</ShortDescription>
		<LongDescription>Interface {0} is annotated with a scope, {1}</LongDescription>
		<Details>
			<![CDATA[
			Guice does not support annotating an interface with a scope.
			
			<p>When Guice is asked to inject an interface that is annotated with a scope, it will throw a runtime exception.</p>
			
			<p>Recommended alternatives:
			<ul>
			    <li>Annotate the implementation (rather than the interface), or</li>
			    <li>Set the scope when defining the binding in a module, e.g.: 
			    <pre>bind(PaymentProcessor.class).to(CreditCardProcessor.class);</pre>
			    to 
			    <pre>bind(PaymentProcessor.class).to(CreditCardProcessor.class).in(MyScope.class);</pre></li>
			</ul>
			]]>
		</Details>
	</BugPattern>
	
	<BugPattern type="GUICE_SUSPICIOUS_SUBMODULE_CONFIGURATION">
		<ShortDescription>Suspicious submodule configuration</ShortDescription>
		<LongDescription>Modules should be configured via install(Module)</LongDescription>
		<Details>
			<![CDATA[
			Using Module.configure(Binder) to configure bindings will not bind the module's @Provider methods.
			
			<p>To correctly configure bindings, use AbstractModule.install(Module) (or Binder.install(Module), if your module don't extend AbstractModule).</p>
			
			<p>For example:
			<pre>
	public MyModule extends AbstractModule {
	    public void configure() {
	        new AnotherModule().configure(binder());
	    }
	}
			</pre>
			
			should be:
			<pre>
	public MyModule extends AbstractModule {
	    public void configure() {
	        install(new AnotherModule());
	    }
	}
			</pre>
			]]>
		</Details>
	</BugPattern>
	
	<BugPattern type="GUICE_STATIC_FIELD_INJECTION">
		<ShortDescription>Static field annotated with @Inject</ShortDescription>
		<LongDescription>Injection on static field {1.name} is recommended against</LongDescription>
		<Details>
			<![CDATA[
			"New applications developed with Guice should not use [requestStaticInjection()]." -- <a href="http://code.google.com/p/google-guice/wiki/AvoidStaticState">Guice: Avoid static state</a>.
		
			<p>Note that if you are using <code>requestStaticInjection()</code> for this class,
			Guice will neither inject the static field, nor fail with an error notifying you of this.</p>
			]]>
		</Details>
	</BugPattern>
	
	<BugPattern type="GUICE_FINAL_FIELD_INJECTION">
		<ShortDescription>Final field annotated with @Inject</ShortDescription>
		<LongDescription>{1.name}, a final field, is annotated with @Inject</LongDescription>
		<Details>
			<![CDATA[
		    <p>"Never inject final fields" --
		    <a href="http://code.google.com/p/google-guice/wiki/MinimizeMutability">Guice best practices : MinimizeMutability</a></p>
		    
		    <p>Note that while Guice will inject:
		    <pre>
    class Foo {
        @Inject String myString = "";
    }
		    </pre>
		    
		    ... Guice will not inject:
		    <pre>
    class Bar {
        @Inject String myString;
        Bar() {
            myString = "";
        }
    }
		    </pre>
		    
		    <p>As such, using final field injection can lead to confusion.</p>
		    <p>Furthermore, since Guice documentation says to not use final field injection,
		    you should not: its behaviour may change.</p>
		    
		    <p>Note that JSR-330 does not support final field injection.</p>
		    
		    <p>See also:</p>
		    <ul>
		       <li><a href="http://code.google.com/p/google-guice/issues/detail?id=245">Guice issue #245: Guice should refuse to inject final fields</a></li>
		    </ul>
		    
		    ]]>
		       
		</Details>
	</BugPattern>
	
	<BugCode abbrev="GUICE">Guice bugcode abbreviation</BugCode>

</MessageCollection>
